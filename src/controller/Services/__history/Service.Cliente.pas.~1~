unit Service.Cliente;

interface

uses
  uCliente, uORMPersistencia, uRepositoryFactory, System.Generics.Collections;

type
  TClienteService = class
  private
    FRepo: TPersistencia<TCliente>;
  public
    constructor Create;
    function ObterTodos: TObjectList<TCliente>;
    function ObterPorID(ID: Integer): TCliente;
    procedure Salvar(Cliente: TCliente);
    procedure Excluir(ID: Integer);
  end;

implementation

{ TClienteService }

constructor TClienteService.Create;
begin
  FRepo := TRepositoryFactory.ClienteRepository;
end;

function TClienteService.ObterTodos: TObjectList<TCliente>;
begin
  Result := FRepo.ObterTodos;
end;

function TClienteService.ObterPorID(ID: Integer): TCliente;
var
  Lista: TObjectList<TCliente>;
begin
  Lista := FRepo.ObterTodos;
  Result := Lista.Find(
    function(Item: TCliente): Boolean
    begin
      Result := Item.Codigo = ID;
    end
  );
end;

procedure TClienteService.Salvar(Cliente: TCliente);
begin
  if Cliente.Codigo = 0 then
    FRepo.Inserir(Cliente)
  else
    FRepo.Atualizar(Cliente);
end;

procedure TClienteService.Excluir(ID: Integer);
var
  Cliente: TCliente;
begin
  Cliente := ObterPorID(ID);
  if Assigned(Cliente) then
    FRepo.Excluir(Cliente);
end;

end.
